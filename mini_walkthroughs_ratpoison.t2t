
++Getting started with Salix Ratpoison++ 


+++Overview+++

//Ratpoison// is a tiling window manager, somewhat like //xmonad// or
//spectrwm//. Its two main features are that applications fill the whole
screen, with no bars or buttons, and the user interface can be
controlled entirely from the keyboard, with no mouse. If needed, any
number of windows may be shown simultaneously and rearranged at will -
hence the term "tiling" WM. All this may take some getting used to, but
although - or perhaps because - the interface is so very different from
the conventional point-and-click approach, it can quickly become highly
intuitive. Learning which actual keys do what takes far less time than
might be imagined. Apart from its efficiency and lack of clutter,
Ratpoison is a good choice for anyone concerned about RSI
(cumulative strain from long-term mouse use), or for netbook
users, because "every pixel counts". It is also highly
configurable - and fast!

The applications present for the Ratpoison edition aim to fit in with
its minimalist (but not spartan) approach. The majority use vim-style
keybindings, even though Ratpoison itself does not, so users will need
to become comfortable with these if they are not already; cheat sheets
are available online to help assimilate them, as well as guides (and
manpages) for the individual applications. Common operations use
only a small subset of keys, which makes the learning curve smoother:
for basic browsing, for instance, all you need to get started is page
and history navigation and to know how to open links and tabs or
windows. Other functions can be learned by exploration at your own pace.
To begin using Vim itself, try running ``vimtutor`` from a terminal, and
just follow the instructions.


+++Starting Ratpoison and running applications+++

When you boot Salix Ratpoison, there is no graphical login screen: when
you log in, you enter the Linux terminal. Log in as your normal user
and type
``` startx

to start Ratpoison itself.

You should then see the Salix wallpaper, and a message will appear
briefly telling you how to view a list of commands. Type
``Ctrl-t`` (``C-t``, in Ratpoison's own notation) then a question mark;
pressing any key takes you back to where you were before. There is
nothing to see (apart from the beautiful Salix wallpaper)! But it's just
as easy to set Ratpoison to work as with any more conventional desktop.

To select an application from the menu, type ``C-t r``, and use the arrow
keys to navigate (Vim's ``hjkl`` keys also work). Right arrow (or ``l``)
accesses submenus (such as "Network") and left arrow (or ``h``) goes
back up a level. Right arrow or enter runs the application (if you open
one by mistake, don't worry, just type ``C-t r`` again - we will
see how to close windows and applications later).

[img/ratmenu.png]

Some common options are available directly at the top. The
//Vimprobable2// browser, for instance, can be found under Network but
also by just selecting "Browser". Remember to use the keyboard and not
the mouse! A third way to open it bypasses the menu altogether:
``` C-t v
You can create more shortcuts like this for applications you use a
lot by adding them to the configuration file, which we will look at
below.

//apvlv//, under Accessories, can be used to read pdf documents such as
this guide. Also under accessories, "Unit conversion" starts the
console application units, which will convert between a large range of
scales, such as time, weight, or currency, including some quite
unusual ones.


+++Vimprobable browsing+++

Notice that there are no menus, toolbars, buttons, or scrolling - just a
line at the bottom containing the URL. To open a different page, type
``o``, and ``:open`` should appear at the very bottom left of the screen.
Type:

```
http://www.nongnu.org/ratpoison/doc/
```

When the page has loaded, type
``f`` and then select a number to follow a link:

[img/ratpoisonmanual.png]

``Shift-h`` takes you back to where you were before.
``t`` works like
``o`` but opens the URL in a new window, as does ``shift-f`` instead of
``f``. Pressing ``TAB`` after typing the beginning of a URL will suggest
completions taken from the history; use ``TAB`` again to move through the
choices (``shift-TAB`` to go back up) and ``Enter`` to select. ``O`` rather
than ``o`` (and ``T`` rather than ``t``) allows you to edit the URL of the
current page - try it. ``j`` and ``k`` scroll down and up.
``Shift-l`` moves one page forward in your browsing history. ``d`` closes
the current window. For more details, consult ``man vimprobable2``, as
well as the Vimprobable website, see also ``man vimprobablerc`` for
configuration options. Note that ``.`` and ``,`` are handy alternatives to
``f`` and ``shift-f``.

There are no tabs. In the next section, we will see how Ratpoison allows
you to use windows to do the work of tabs, but more informatively.

Note that if the input received by ``o`` or ``t`` can't be resolved into a
URL, it will be sent to a search engine; the default is //DuckDuckGo//.
If the first item is ``i``, ``s``, ``w``, ``wd``, or ``y``, a different
search engine is used in each case. These shortcuts are described in the
Vimprobable man page and may also be customized in the .vimprobablerc
configuration file.

To insert data in forms (for instance, login and password) use tab till
the cursor is in the right place. Another ``TAB`` moves to the next field
or link; you may then use ``ESC`` to leave insert mode and return to
command mode.

If you find your keystrokes are still being interpreted as browser
commands, which may happen as a result of the way certain sites are
designed, try pressing enter twice instead of just once after typing
``f`` and selecting the number; failing this, try ``C-z``. The
converse problem may arise if you have
inadvertently passed keystrokes to ``o`` or ``t``; they will appear at
the very bottom right of the browser window. To ignore them and return
to command mode, clearing the buffer, press ``ESC``.

As described in Vimprobable's man page, it is necessary to create some
files for all its features to work:
``` touch ~/.config/vimprobable/history

though some of these may already be present.


+++Window management+++

Let's now see how Ratpoison deals with several open windows. ``C-t w``
generates a list showing all of them.
Notice that each one is associated with a number: ``C-t`` followed by
the number changes to that one.
``C-t`` ``C-t`` returns to the previous window.
This is very useful indeed for switching rapidly back and forth between
two apps - for instance, an editor and a browser - and is an example of
how Ratpoison shines ergonomically. ``C-t k`` closes the current window,
and ``C-t shift-k`` kills the current application. To see a list
of commands, type ``C-t ?`` for further detail, see also
``` man ratpoison

and the online manual, which we opened above with
//Vimprobable2//.

To work with two or more windows together, Ratpoison allows the user to
tile windows. ``C-t s`` splits the screen with the current window above
whichever window was last open; ``C-t S`` splits them horizontally. These
steps can be repeated to split the focused window further. ``C-t TAB``
(or ``C-t`` and an arrow key) moves the focus around, and
``C-t C-[arrow]``
swaps the tiled windows over. ``C-t Q`` undoes the splitting
and allows the currently focused window to fill the screen. In practice,
it's rarely useful to have more than one or two windows visible:

[img/vimprobable.png]


+++The console and package management+++

To open the command line, type ``C-t c``. There is no automatic package
management in the Ratpoison edition, so you will need to make regular
manual checks for updates:

```
sudo spi --update  #update the package list
sudo spi --upgrade #upgrade to reflect any changes
```

//(the parts including the # symbol and after them are comments and you don't need to type them).//

Apart from the //Vimprobable2// browser, the default applications include
//Alpine// as the mail client and //Gnome Commander// as the file manager.
//Music On Console// and //Whaaw Media Player// are the audio and video
players, with //GVim// as text/code editor. //apvlv// can be used to view
pdf files. As we have just seen, package management is console-based,
using //slapt-get// and //slapt-src//. Further options are available
in the repository. //Firefox// may be installed adding the
//pentadactyl// or //vimperator// addon for mouse-free browsing, or
alternatively //Jumanji//, //XXXTerm// or //w3m//, a browser for the
command line. //Thunderbird// can be used with the //Muttator// addon
while //Claws-mail// works almost entirely from the keyboard;
//mcabber// and //irssi// are Jabber and IRC clients for the console.

Note: To see how to edit Alpine's configuration file to access mail from
one popular provider via SMTP, see the page in the
[Salix wiki http://www.salixos.org/wiki/index.php/How_to_set_up_Alpine_with_a_Gmail_account].

Wordgrinder and sc are word processing and spreadsheet applications.
Flash is not included but is available from the
repositories. Screen for managing multiple consoles works well with
Ratpoison. Users are encouraged to tailor and expand the application
selection according to taste; when it comes to text processing, for
instance, //PyRoom// is
an elegant choice for full-screen, distraction-free writing, and it
might be complemented by //Antiword// to convert proprietary file
formats into plain text.

Note that the //Gslapt// and //Sourcery// graphical package management
tools (equivalent to //slapt-get// and //slapt-src//)  may also be used
with out mouse, though this is perhaps more awkward than working on the
command line. In either case, regular manual upgrading will still be
necessary.

As an example, we will install //mplayer2//, the classic console media player.

```
sudo spi -u
sudo spi -i mplayer2
```

Note: To see how to edit Alpine's configuration file to access mail from
one popular provider via SMTP, see the page in the
[Salix wiki http://www.salixos.org/wiki/index.php/How20to20set20up20Alpine20with20a20Gmail20account].


+++Editing the configuration file+++

After using //Alpine// a little, one problem may become apparent. Its
shortcut for selecting a file, for example to attach it, is ``C-t``. But
that's Ratpoison's escape key combination! In fact, Ratpoison has a
solution for such conflicts, referred to somewhat cryptically in the
shortcut list as //meta//: ``C-t t`` should send ``C-t`` to the
application in the active window. However, this does not work in the
terminal, which does not recognize the character if it receives it in
this form.

Everything in Ratpoison is configurable, and the ``C-t`` combination
itself is no exception. A temporary solution is to reassign the binding
using Ratpoison's command input feature. ``C-t :`` conjures up an input
line at the top right of the screen. This can be used for passing
instructions to Ratpoison. For instance, one way of opening an
application in a new console is:
``` C-t :exec xterm -e alpine

which starts the program we
just installed. The colon command can be used to pass a number of
instructions to Ratpoison; see
``` man ratpoison

for a full list
together with shortcuts where they have been defined. In fact, there is
a shortcut for ``exec``. Just type
``` C-t ! [application]

``C-t C-!`` opens it in a console.

To change the ``C-t`` default, do: ``C-t :escape Super_L``,
which is the so-called "Windows key" to the left of the keyboard. As
well as resolving the conflict with //Alpine//, this has the great
benefit of being just one keystroke. Some functions may not work
correctly, in particular, the very useful ``C-t C-t`` to go back to where
you just were, and performance varies from one keyboard to another, so
it's worth experimenting. Another possibility is the "Menu" key. To
return to the default: ``C-t :escape C-t``.

To make such a change permanent, edit //~/.ratpoisonrc//. If you are
using Ratpoison, you can open the file now (with //GVim// or //Vim//) and
tile it horizontally with the window where you are reading this guide
(``C-t Shift-s``). Let's go through some items in the file.

```
# .ratpoisonrc

banish
% !! there is no such application in the repositories

set border 0
set barpadding 0 0
set font terminus
set winfmt %n%s%a

bind W exec rpallwin
bind r exec ~/.ratmenu/main.sh

bind F1 exec rpws move1
bind F2 exec rpws move2
bind F3 exec rpws move3
bind F4 exec rpws move4
bind F5 exec rpws move5
bind F11 exec rpws moveprev
bind F12 exec rpws movenext

bind v exec vimprobable2

# set default background
%this will need updating
exec feh --bg-scale /usr/share/xfce4/backdrops/StairWay.png

# create 5 workspaces and create aliases (run: rpws help)
exec rpws init 5 -k

```

//banish// sends the mouse pointer to bottom right (incidentally, you may
wish to install //unclutter//, which makes it fade out altogether
after a few seconds of stillness; place the line
``` unclutter &

in your
//~/.xinitrc// to run it automatically when X is started). We've seen
all but one of the custom keybindings in the "bind" statements. To
change the wallpaper, point to a different image. The final item sets
up workspaces, which we'll look at next - including ``C-t W``.

Before editing the file, create a backup copy in case anything goes
wrong. To change the ``C-t`` default, simply add a line:

``` escape Menu

We've seen many of the custom keybindings in the "bind" statements.

The final item, together with the bindings to function keys, sets up
workspaces; we'll look at these next - including ``C-t W``.


+++Using workspaces+++

If you have several terminals open, and various browser windows and
some other applications, the number of windows may become unwieldy. To
help with this, Ratpoison allows you to use workspaces. (In the online
Ratpoison manual, these are referred to more precisely as
"groups".) You might then put all browser windows in one
workspace, for instance.

``C-t w`` lists the windows in the current workspace; ``C-t W`` shows
four more workspaces, which were set up in the last line of the
configuration file. In a console, type ``rpws help`` .

```
$ rpws help
Usage:
     rpws init n [-k] [-a]  - setup rpws with n workspaces.
                                -a sets up command aliases;
                                -k sets up key bindings and aliases.
     rpws dump <fname>      - dumps the current layout to <fname>
     rpws restore <fname>   - restores rpws workspaces from <fname>
     rpws help              - this documentation
     rpws n                 - switch to this workspace

Usage:
    Add the following line in ~/.ratpoisonrc

         exec /path/to/rpws init 6 -k

    This creates 6 aliases rpws1, rpws2, etc. It also binds the keys
    M-F1, M-F2, etc to each rpwsN alias. Moreover, rpwsn (Next) and
    rpwsp (Prev) are created, and C-M-{Right,Left} are bound to
    rpws{n,p}. Full list of keybindings created are:

        M-F$i           Goto workspace $i
        C-M-Right       Goto Next workspace
        C-M-Left        Goto Prev workspace
        C-t F$i         Move window to workspace $i
        C-t F11         Move current window to prev workspace
        C-t F12         Move current window to next workspace

for more detailed documentation run "perldoc /usr/bin/rpws"
```

The usage summary you will see may be a little cryptic. Just as ``C``
means Control, ``M`` refers to Alt. Use Alt with the function keys to
access each workspace. Ctrl-Alt and the arrows move up and down
workspaces. The remaining options move the current window to a different
workspace.


+++Adding an item to the menu+++

The directory ``~/.ratmenu`` contains the main menu file //menu.sh//, and
the submenus it calls; all these are editable scripts. We will now edit
the Network menu using //GVim//. //GVim// is in the menu, but try calling
it using the colon

``` C-t :exec gvim ~/.ratmenu/multimedia.sh

or simply

``` C-t ! gvim ~/.ratmenu/multimedia.sh

[img/ratmenu_edit.png]

Note that graphical applications are called directly, but command line
programs need to be opened inside a terminal.

Use ``j`` and ``k`` to navigate to where you want to add the entry for
//Mplayer2//, type ``i`` to insert, ``ESC`` to return to command mode, and
``:wq`` to write and save. Test the change by typing
``` C-t r

The new
item should already appear. If all is well, you may close the editor.


CLEARPAGE
+++Summary+++

Here is a short list of key bindings common to many of the Salix
Ratpoison edition's applications.


|| Shortcuts  | Description 
| gg          | go to the top
| G           | go to the bottom
| h           | left 
| j           | down
| k           | up 
| l           | right 
| TAB         | select form fields, links. C-z to type in some forms 
| o           | open
| t           | open in new tab/window 
| f           | follow a link
| d           | close/delete 
| H           | go back 
| /           | search forwards
| ?           | search backwards 
| ESC         | return to command mode (and clear the buffer of any mistyped keystrokes) 
| :           | pass a non-shortcut command to the application 


For a summary of Ratpoison's own shortcuts, type ``C-t ?``.

While what is covered here should be enough to get you started, many
more features of the applications and especially Ratpoison itself are
described in online manuals, guides and the manpages. Once you are used
to the core features and have them at your fingertips, it's worth
digging around further, as well as investigating suitable applications
to add to the set. Configuration may be done straightforwardly by
editing the files - suggestions may be found online. One of Ratpoison's
principal charms is how easily it can be tailored to fit each user's
needs and taste.

One miscellaneous item is the mount manager in the System menu, which
may also be called from the command line as //gmountman//. When needed,
this deals with the mounting of removable devices, including DVDs. Also,
//banish// may be called at any time by the shortcut ``C-t b``.

Remember to check frequently for package updates using //slapt-get// or //spi//.

Finally, to shut down Ratpoison, there is an entry in the Exit submenu,
from where it is also possible to reboot or shut down the computer.

